import { Composer } from 'grammy';

import { keyboard as menuKeyboard } from './../keyboards/menu.keyboard.js';

import { Lessons } from './../../db/models/Lessons.js';
import { Schedules } from './../../db/models/Schedules.js';
import { Users } from './../../db/models/Users.js';

export const feature = new Composer().chatType('private');

feature.command('start', async (ctx) => {
    await Users.findOrCreate({ id: ctx.from.id });

    await ctx.reply('[üé®] –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.', {
        reply_markup: menuKeyboard,
    });
});

feature.hears(/üéÆ –ú–µ–Ω—é|\/menu/, async (ctx) => {
    await ctx.reply('[üé®] –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.', {
        reply_markup: menuKeyboard,
    });
});

function normalizeDay(dayId) {
    const days = {
        0: '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
        1: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        2: '–≤—Ç–æ—Ä–Ω–∏–∫',
        3: '—Å—Ä–µ–¥–∞',
        4: '—á–µ—Ç–≤–µ—Ä–≥',
        5: '–ø—è—Ç–Ω–∏—Ü–∞',
        6: '—Å—É–±–±–æ—Ç–∞',
    };

    return days[dayId];
}

function tableSchedule(schedules) {
    const delta = 18;
    let text = '<code>';

    for (let schedule of schedules) {
        text += '‚îå' + '‚îÄ'.repeat(delta - 2) + '‚îê' + '\n';
        text +=
            '|' +
            normalizeDay(schedule.dayId) +
            ' '.repeat(delta - normalizeDay(schedule.dayId).length - 2) +
            '|' +
            '\n';
        text += '‚îú' + '‚îÄ'.repeat(delta - 2) + '‚î§' + '\n';

        for (let lesson of schedule.lessons) {
            text +=
                '‚îÇ' +
                lesson +
                ' '.repeat(delta - lesson.length - 2) +
                '|' +
                '\n';
        }

        text += '‚îî' + '‚îÄ'.repeat(delta - 2) + '‚îò' + '\n';
    }

    return text + '</code>';
}

feature.hears(/üìö –í—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ|\/getschedule/, async (ctx) => {
    const schedules = await Schedules.find({ userId: ctx.from.id });

    ctx.reply(tableSchedule(schedules));
});

feature.hears(/üìÅ –î\/–ó|\/getlessons/, async (ctx) => {
    const tomorrowDay = new Date().getDay() + 1;
    const dayId = tomorrowDay !== 0 && tomorrowDay !== 6 ? tomorrowDay : 1;

    let schedule = await Schedules.findOrCreate({
        userId: ctx.from.id,
        dayId: tomorrowDay,
    });

    let lessons = await Lessons.findOrCreate({ userId: ctx.from.id });

    const tomorrowLessons = schedule.lessons
        .map((el) => {
            const lesson = lessons.lessons.get(el);

            return `${el[0].toUpperCase() + el.slice(1)}: ${lesson}`;
        })
        .join('\n');

    await ctx.reply(
        `[üß©] –í–æ—Ç –≤–∞—à–µ –î/–ó –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n<code>${tomorrowLessons}</code>`
    );
});
